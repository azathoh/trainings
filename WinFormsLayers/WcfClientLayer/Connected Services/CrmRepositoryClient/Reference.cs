//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WcfClientLayer.CrmRepositoryClient {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CrmRepositoryClient.ICRMRepository", CallbackContract=typeof(WcfClientLayer.CrmRepositoryClient.ICRMRepositoryCallback))]
    public interface ICRMRepository {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICRMRepository/GetAllCompanies", ReplyAction="http://tempuri.org/ICRMRepository/GetAllCompaniesResponse")]
        System.Collections.Generic.List<Contracts.Company> GetAllCompanies();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICRMRepository/GetAllCompanies", ReplyAction="http://tempuri.org/ICRMRepository/GetAllCompaniesResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Contracts.Company>> GetAllCompaniesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICRMRepository/GetAllEmployees", ReplyAction="http://tempuri.org/ICRMRepository/GetAllEmployeesResponse")]
        System.Collections.Generic.List<Contracts.Employee> GetAllEmployees();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICRMRepository/GetAllEmployees", ReplyAction="http://tempuri.org/ICRMRepository/GetAllEmployeesResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Contracts.Employee>> GetAllEmployeesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICRMRepository/GetEmployeesByCompany", ReplyAction="http://tempuri.org/ICRMRepository/GetEmployeesByCompanyResponse")]
        System.Collections.Generic.List<Contracts.Employee> GetEmployeesByCompany(string companyName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICRMRepository/GetEmployeesByCompany", ReplyAction="http://tempuri.org/ICRMRepository/GetEmployeesByCompanyResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Contracts.Employee>> GetEmployeesByCompanyAsync(string companyName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICRMRepository/AddCompany", ReplyAction="http://tempuri.org/ICRMRepository/AddCompanyResponse")]
        void AddCompany(Contracts.Company company);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICRMRepository/AddCompany", ReplyAction="http://tempuri.org/ICRMRepository/AddCompanyResponse")]
        System.Threading.Tasks.Task AddCompanyAsync(Contracts.Company company);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICRMRepository/AddEmployee", ReplyAction="http://tempuri.org/ICRMRepository/AddEmployeeResponse")]
        void AddEmployee(Contracts.Employee employee);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICRMRepository/AddEmployee", ReplyAction="http://tempuri.org/ICRMRepository/AddEmployeeResponse")]
        System.Threading.Tasks.Task AddEmployeeAsync(Contracts.Employee employee);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICRMRepository/AddEmployeeToCompany", ReplyAction="http://tempuri.org/ICRMRepository/AddEmployeeToCompanyResponse")]
        void AddEmployeeToCompany(Contracts.Employee employee, Contracts.Company company);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICRMRepository/AddEmployeeToCompany", ReplyAction="http://tempuri.org/ICRMRepository/AddEmployeeToCompanyResponse")]
        System.Threading.Tasks.Task AddEmployeeToCompanyAsync(Contracts.Employee employee, Contracts.Company company);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICRMRepository/KeepAlive")]
        void KeepAlive();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICRMRepository/KeepAlive")]
        System.Threading.Tasks.Task KeepAliveAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICRMRepositoryCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICRMRepository/Signal")]
        void Signal();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICRMRepositoryChannel : WcfClientLayer.CrmRepositoryClient.ICRMRepository, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CRMRepositoryClient : System.ServiceModel.DuplexClientBase<WcfClientLayer.CrmRepositoryClient.ICRMRepository>, WcfClientLayer.CrmRepositoryClient.ICRMRepository {
        
        public CRMRepositoryClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public CRMRepositoryClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public CRMRepositoryClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public CRMRepositoryClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public CRMRepositoryClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public System.Collections.Generic.List<Contracts.Company> GetAllCompanies() {
            return base.Channel.GetAllCompanies();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Contracts.Company>> GetAllCompaniesAsync() {
            return base.Channel.GetAllCompaniesAsync();
        }
        
        public System.Collections.Generic.List<Contracts.Employee> GetAllEmployees() {
            return base.Channel.GetAllEmployees();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Contracts.Employee>> GetAllEmployeesAsync() {
            return base.Channel.GetAllEmployeesAsync();
        }
        
        public System.Collections.Generic.List<Contracts.Employee> GetEmployeesByCompany(string companyName) {
            return base.Channel.GetEmployeesByCompany(companyName);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Contracts.Employee>> GetEmployeesByCompanyAsync(string companyName) {
            return base.Channel.GetEmployeesByCompanyAsync(companyName);
        }
        
        public void AddCompany(Contracts.Company company) {
            base.Channel.AddCompany(company);
        }
        
        public System.Threading.Tasks.Task AddCompanyAsync(Contracts.Company company) {
            return base.Channel.AddCompanyAsync(company);
        }
        
        public void AddEmployee(Contracts.Employee employee) {
            base.Channel.AddEmployee(employee);
        }
        
        public System.Threading.Tasks.Task AddEmployeeAsync(Contracts.Employee employee) {
            return base.Channel.AddEmployeeAsync(employee);
        }
        
        public void AddEmployeeToCompany(Contracts.Employee employee, Contracts.Company company) {
            base.Channel.AddEmployeeToCompany(employee, company);
        }
        
        public System.Threading.Tasks.Task AddEmployeeToCompanyAsync(Contracts.Employee employee, Contracts.Company company) {
            return base.Channel.AddEmployeeToCompanyAsync(employee, company);
        }
        
        public void KeepAlive() {
            base.Channel.KeepAlive();
        }
        
        public System.Threading.Tasks.Task KeepAliveAsync() {
            return base.Channel.KeepAliveAsync();
        }
    }
}
